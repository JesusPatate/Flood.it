def createHashModule(k)
   
   moduleCode = "require 'digest/md5'\n\n"
   moduleCode = moduleCode + "module HashFunctions\n\n"
   
   keySize = 32
   m = 41
   
   (1..k).each do |i|
      a = []
      while a.length < keySize do
         a.insert(0, rand(m-1))
#          a.uniq!
      end
      moduleCode = moduleCode + "\t@@a" + i.to_s + " = " + a.inspect + "\n"
   end
   
   moduleCode = moduleCode + "\n"
   
   (1..k).each do |i|
      moduleCode = moduleCode + "\tdef h" + i.to_s + "(k)\n"
      moduleCode = moduleCode + "\t\tresult = 0\n"
      moduleCode = moduleCode + "\t\tn = 0\n"
      moduleCode = moduleCode + "\t\tk.each_byte do |b|\n"
      moduleCode = moduleCode + "\t\t\tresult = result + @@a" + i.to_s + "[n] * b\n"
      moduleCode = moduleCode + "\t\t\tn = n + 1\n"
      moduleCode = moduleCode + "\t\tend\n"
      moduleCode = moduleCode + "\t\treturn result.modulo(" + m.to_s + ")\n"
      moduleCode = moduleCode + "\tend\n\n"
   end
   
   moduleCode = moduleCode + "\tdef hashKey(k)\n"
   moduleCode = moduleCode + "\t\tmd5 = Digest::MD5.hexdigest(k)\n"
   moduleCode = moduleCode + "\t\treturn ["
   (1..k).each do |i|
      moduleCode = moduleCode + "h" + i.to_s + "(md5)"
      if i != k
         moduleCode = moduleCode + ", "
      end
   end
   moduleCode = moduleCode + "]\n"
   moduleCode = moduleCode + "\tend\n\n"

   moduleCode = moduleCode + "end";
   
   return moduleCode;
end

#################################################################
#
# Generation
#
##################################################################
puts createHashModule(2)

require 'digest/md5'

module HashFunctions

        @@a1 = [18, 39, 3, 37, 12, 29, 7, 30, 23, 2, 5, 39, 24, 12, 26, 12, 27, 0, 25, 24, 9, 12, 9, 18, 32, 27, 38, 30, 18, 27, 12, 25]
        @@a2 = [6, 9, 38, 16, 21, 26, 3, 7, 13, 5, 30, 22, 15, 19, 31, 30, 32, 9, 9, 0, 18, 10, 7, 1, 16, 6, 12, 6, 22, 3, 5, 29]

        def h1(k)
                result = 0
                n = 0
                k.each_byte do |b|
                        result = result + @@a1[n] * b
                        n = n + 1
                end
                return result.modulo(41)
        end

        def h2(k)
                result = 0
                n = 0
                k.each_byte do |b|
                        result = result + @@a2[n] * b
                        n = n + 1
                end
                return result.modulo(41)
        end

        def hashKey(k)
                md5 = Digest::MD5.hexdigest(k)
                return [h1(md5), h2(md5)]
        end

end